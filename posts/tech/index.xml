<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>👨🏻‍💻 技术 on Lorenwe Blog</title>
    <link>https://lorenwe.eu.org/posts/tech/</link>
    <description>Recent content in 👨🏻‍💻 技术 on Lorenwe Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 23 Oct 2024 11:14:01 +0800</lastBuildDate><atom:link href="https://lorenwe.eu.org/posts/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust如何正确解析yaml文件</title>
      <link>https://lorenwe.eu.org/posts/tech/rust%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E8%A7%A3%E6%9E%90yaml%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 23 Oct 2024 11:14:01 +0800</pubDate>
      
      <guid>https://lorenwe.eu.org/posts/tech/rust%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E8%A7%A3%E6%9E%90yaml%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;h3 id=&#34;一简介&#34;&gt;一、简介&lt;/h3&gt;
&lt;p&gt;serde_yaml 是 Rust 语言中一个用于序列化和反序列化 YAML 数据的库。它以其高性能和灵活性而广受欢迎，特别适用于需要处理 YAML 配置文件的项目。在这篇博客中，我们将探讨 serde_yaml 的基本用法，并提供一些实用的示例代码。&lt;/p&gt;
&lt;h3 id=&#34;二使用场景&#34;&gt;二、使用场景&lt;/h3&gt;
&lt;p&gt;serde_yaml 常用于以下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置管理：许多应用程序使用 YAML 文件来存储配置参数，serde_yaml 可以轻松解析这些文件。&lt;/li&gt;
&lt;li&gt;数据交换：在系统之间传递数据时，YAML 格式因其可读性而常被选用。&lt;/li&gt;
&lt;li&gt;文档生成：一些工具使用 YAML 来描述文档结构，serde_yaml 可以帮助生成和解析这些文档。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三基本使用&#34;&gt;三、基本使用&lt;/h3&gt;
&lt;p&gt;开始使用 serde_yaml 之前，先创建一个 serde_yaml_test 项目文件夹，在文件夹中使用 &lt;code&gt;cargo init&lt;/code&gt; 初始化 rust 项目，然后在项目的 Cargo.toml 文件中添加依赖：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust 中的 Sized</title>
      <link>https://lorenwe.eu.org/posts/tech/rust%E4%B8%AD%E7%9A%84sized/</link>
      <pubDate>Wed, 16 Oct 2024 09:55:37 +0800</pubDate>
      
      <guid>https://lorenwe.eu.org/posts/tech/rust%E4%B8%AD%E7%9A%84sized/</guid>
      <description>&lt;p&gt;原文： &lt;a href=&#34;https://github.com/pretzelhammer/rust-blog/blob/master/posts/sizedness-in-rust.md&#34;&gt;Sizedness in Rust&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;
&lt;p&gt;Sized 其实是 Rust 中最重要的概念之一，可谓功成不居。它往往以微妙的形式与其他语言特性交织在一起，只有在形如 &amp;ldquo;x doesn&amp;rsquo;t have size known at compile time&amp;rdquo; 的错误信息中才会显露，这些错误信息对于每个 Rustacean 来说都太过熟悉了。在本文中，我们将探讨 Sized 的各种形式，包括固定大小类型、未定大小类型以及零大小类型，同时还将考察它们的用例、优势、痛点及相应解决方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解 Rust 中字符串的 str, &amp;str 与 String 类型的区别</title>
      <link>https://lorenwe.eu.org/posts/tech/%E7%90%86%E8%A7%A3rust%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84strstr%E4%B8%8Estring%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 15 Oct 2024 15:45:24 +0800</pubDate>
      
      <guid>https://lorenwe.eu.org/posts/tech/%E7%90%86%E8%A7%A3rust%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84strstr%E4%B8%8Estring%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;h3 id=&#34;字符串的类型大小和存储位置的概念定义及区分&#34;&gt;字符串的类型大小和存储位置的概念定义及区分&lt;/h3&gt;
&lt;p&gt;在学习 Rust 的过程中，我们经常会遇到 Cannot know size until runtime: str 这样的报错，而大多数的解释都是搬运 Rust 官方文档的解释，这是由于 &lt;strong&gt;str 是动态大小类型 (Dynamic Sized Type，DST) ，因此编译器无法确定 str 类型的大小&lt;/strong&gt;。然而给我们直观的感受是 &amp;ldquo;hello&amp;rdquo; 字面量只有 5 个字节，为什么在编译期间不能确定其大小呢？&lt;/p&gt;
&lt;p&gt;上述问题困扰了我很久，后来发现这是由于我对&lt;strong&gt;类型大小&lt;/strong&gt;与&lt;strong&gt;值大小&lt;/strong&gt;这两个概念搞混了。假设字符串字面量的类型是 str，那么考虑如下代码:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在windows系统下安装DockerDesktop后迁移镜像位置</title>
      <link>https://lorenwe.eu.org/posts/tech/%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85dockerdesktop%E5%90%8E%E8%BF%81%E7%A7%BB%E9%95%9C%E5%83%8F%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Thu, 10 Oct 2024 16:28:40 +0800</pubDate>
      
      <guid>https://lorenwe.eu.org/posts/tech/%E5%9C%A8windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85dockerdesktop%E5%90%8E%E8%BF%81%E7%A7%BB%E9%95%9C%E5%83%8F%E4%BD%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;由于现在 docker Desktop 默认使用 WSL 2 来运行，而不是以前的 Hyper-V。
所以 在win10上安装 docker Desktop时没有存储路径选择，而是直接默认安装到了系统 C盘，这样后续使用一些镜像后，日积月累C盘空间会越来越小。&lt;/p&gt;
&lt;p&gt;镜像文件位置是在C盘下的用户名下的\AppData\Local\Docker\wsl
例如我的保存位置是：
&lt;code&gt; C:\Users\Admin\AppData\Local\Docker\wsl&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 GitHub Actions 自动部署 Hugo 站点</title>
      <link>https://lorenwe.eu.org/posts/tech/%E4%BD%BF%E7%94%A8githubactions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hugo%E7%AB%99%E7%82%B9/</link>
      <pubDate>Thu, 26 Sep 2024 14:08:16 +0800</pubDate>
      
      <guid>https://lorenwe.eu.org/posts/tech/%E4%BD%BF%E7%94%A8githubactions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2hugo%E7%AB%99%E7%82%B9/</guid>
      <description>&lt;h3 id=&#34;创建代码仓库&#34;&gt;创建代码仓库&lt;/h3&gt;
&lt;p&gt;首先创建 GitHub Pages 站点。该仓库可见性必须是 Public。&lt;/p&gt;
&lt;p&gt;另外创建一个仓库用来存放 Hugo 的源文件，名称随意，这里我的仓库名叫 blogs。建议将仓库可见性设置成 Private 以保护好文章 .md 文件。&lt;/p&gt;
&lt;p&gt;创建完毕后账户下将存在以下两个代码仓库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;公有仓库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://github.com/lorenwe/lorenwe.github.io&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;私有仓库：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://github.com/lorenwe/blogs&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建-workflow-配置&#34;&gt;创建 Workflow 配置&lt;/h3&gt;
&lt;p&gt;在 blogs 仓库下新建 .github/workflows/deploy.yml 文件。内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;name: deploy
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out source
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &amp;quot;latest&amp;quot;
          extended: true # 设置是否需要 extended 版本
          
      - name: Fetch Hugo Themes  # Fetch Hugo themes
        run: git submodule update --init --recursive

      - name: Build
        run: hugo --minify

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          deploy_key: ${{ secrets.DEPLOY_TOKEN }} # 另外还支持 github_token 和 personal_token
          external_repository: lorenwe/lorenwe.github.io # 修改为你的 GitHub Pages 仓库
          publish_branch: main
          publish_dir: ./public
          keep_files: false
          cname: lorenwe.eu.org # 如果使用自定义域名，还需要添加下面一行配置
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;设置-ssh-key&#34;&gt;设置 SSH Key&lt;/h3&gt;
&lt;p&gt;GitHub Pages action 支持三种身份验证方式：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何用PHP读取大文件</title>
      <link>https://lorenwe.eu.org/posts/tech/%E5%A6%82%E4%BD%95%E7%94%A8php%E8%AF%BB%E5%8F%96%E5%A4%A7%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 25 Sep 2024 16:20:33 +0800</pubDate>
      
      <guid>https://lorenwe.eu.org/posts/tech/%E5%A6%82%E4%BD%95%E7%94%A8php%E8%AF%BB%E5%8F%96%E5%A4%A7%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;在 &lt;a href=&#34;https://github.com/sitepoint-editors/sitepoint-performant-reading-of-big-files-in-php&#34;&gt;GitHub&lt;/a&gt; 上可以找到本教程的源码。&lt;/p&gt;
&lt;h3 id=&#34;衡量成功的标准&#34;&gt;衡量成功的标准&lt;/h3&gt;
&lt;p&gt;确保我们对代码有改进的唯一方法是测试一个不好的情况，然后将我们修复之后的测量与另一个进行比较。换句话说，除非我们知道“解决方案”对我们有多大的帮助（如果有的话），否则我们不知道它是否真的是一个解决方案。&lt;/p&gt;
&lt;p&gt;这里有两个我们可以关系的衡量标准。首先是CPU使用率。我们要处理的进程有多快或多慢？第二是内存使用情况。脚本执行时需要多少内存？这两个通常是成反比的 - 这意味着我们可以以CPU使用率为代价来降低内存使用，反之亦然。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>四种常见的POST提交数据方式</title>
      <link>https://lorenwe.eu.org/posts/tech/%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84post%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 25 Sep 2024 15:39:27 +0800</pubDate>
      
      <guid>https://lorenwe.eu.org/posts/tech/%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84post%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ietf.org/rfc/rfc2616.txt&#34;&gt;HTTP/1.1&lt;/a&gt; 协议规定的 HTTP 请求方法有 OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT 这几种。其中 POST 一般用来向服务端提交数据，本文主要讨论 POST 提交数据的几种方式。&lt;/p&gt;
&lt;p&gt;我们知道，HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行请求行、请求头、消息主体。类似于下面这样：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHP构造multipart/form-data格式POST请求体的方法</title>
      <link>https://lorenwe.eu.org/posts/tech/php%E6%9E%84%E9%80%A0form-data%E6%A0%BC%E5%BC%8Fpost%E8%AF%B7%E6%B1%82%E4%BD%93%E7%9A%84%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 25 Sep 2024 14:47:27 +0800</pubDate>
      
      <guid>https://lorenwe.eu.org/posts/tech/php%E6%9E%84%E9%80%A0form-data%E6%A0%BC%E5%BC%8Fpost%E8%AF%B7%E6%B1%82%E4%BD%93%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h3 id=&#34;引言&#34;&gt;引言&lt;/h3&gt;
&lt;p&gt;最近在尝试基于 PHP 做一个反向代理 HTTP 的程序，其中一个需求是将程序收到的HTTP请求还原回 &lt;a href=&#34;https://www.ietf.org/rfc/rfc2616.txt&#34;&gt;RFC2616&lt;/a&gt; 的原始格式。&lt;/p&gt;
&lt;p&gt;在处理的过程中遇到的问题主要在请求体的处理上。利用PHP的封装协议机制，我们可以通过读取 &lt;a href=&#34;https://www.php.net/manual/zh/wrappers.php.php&#34;&gt;php://input&lt;/a&gt; 访问原始的POST信息。但这种方式有一个局限，对于 multipart/form-data 的请求来说，为了支持文件上传的操作，PHP会预先把请求体中的文件暂存到临时文件夹，并把参数解析到变量 $_POST 和 $_FILES 中， php://input 获取原始请求的功能也随之失效。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Win10配置多个Github账号</title>
      <link>https://lorenwe.eu.org/posts/tech/win10%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</link>
      <pubDate>Wed, 25 Sep 2024 14:11:40 +0800</pubDate>
      
      <guid>https://lorenwe.eu.org/posts/tech/win10%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7/</guid>
      <description>&lt;h3 id=&#34;一为什么要配置多个git账号&#34;&gt;一、为什么要配置多个Git账号&lt;/h3&gt;
&lt;p&gt;文章写于2021年的最后一天，最近闲来无事，想搞个导航网站，至于为什么要自己搞，纯属兴趣，既然是兴趣，就想着不要投入太大，整个省心省力的方案，github pages走起，问题就来了，一个github账号只能CANAME一个域名，我刚好挂了一个博客，其他的仓库要pages就只能在我的博客域名后面跟上仓库名这样访问，这很不程序员，所以我就又注册了一个github账号，现在在我的win10电脑上就要使用两个github账户了，当我在我的电脑上给新注册的仓库推送代码时就会出现当前用户没有权限访问，至此，就只能想办法配置好多个用户访问了，其实实际工作中也会遇见这个问题，比如自己肯定有github账户，开发公司项目的时候可能会有公司的gitlab账户或者其他代码仓库的账户，如果是使用http方式拉取代码还好，账户密码一输，记住密码也就没有后续问题了，但如果是使用ssh拉取代码就懵逼了，今天就是来解决这个问题的&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
